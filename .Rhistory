median(airquality$Solar.R, na.rm=T),  # 참일때의 값
airquality$Solar.R)
sum(is.na(airquality$Solar.R))
# 맨 마지막줄에 결측치 데이터를 추가한 후 제거
airquality[length(airquality$Ozone)+1,] = c(NA,NA,NA,NA,NA,NA)
tail(airquality)
tail(na.omit(airquality))
tail(airquality)
tail(airquality, 3)
airquality = na.omit(airquality)
tail(airquality, 3)
##### 산점도
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8))
##### 산점도
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8), pch=0, col'red')
##### 산점도
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8), pch=0, col='red')
##### 산점도
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8),
pch=0,                             # 점의 모양
col='red',                         # 점의 색상
xlab='X축 제목', ylab='Y축 제목',  # X축, Y축 제목
main='산점도(Scatter plot)')       # 제목
##### Line graph
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8),
type='l',                          # 선 그래프
pch=0,
col='red',
xlab='X축 제목', ylab='Y축 제목',
main='선 그래프')
##### Line graph
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8),
type='l',                          # 선 그래프
lwd=3,
col='red',
xlab='X축 제목', ylab='Y축 제목',
main='선 그래프')
##### Line graph
plot(c(1:10), c(2,3,5,7,3,1,9,4,9,8),
type='l',                          # 선 그래프
lwd=3,                             # 선의 굵기
col='blue',
xlab='X축 제목', ylab='Y축 제목',
main='선 그래프')
pie(x)
##### Pie chart
x = c(10,20,30,40)
pie(x)
pie(x, init.angle=90)
pie(x, init.angle=90,
labels=c("Apples", "Bananas", "Cherries", "Dates"),
)
pie(x, init.angle=90,
labels=c("Apples", "Bananas", "Cherries", "Dates"),
main='내가 좋아하는 과일')
##### Bar chart
x = c('A','B','C','D')
y = c(3, 4, 6, 7)
barplot(y, names.arg=x)
barplot(y, names.arg=x, col='orange')
load('data/pop.rda')
head(pop)
table(pop$V1)
barplot(tableV1, main='남녀 인구수', xlab='성별', ylab='인구')
tableV1 = table(pop$V1)
barplot(tableV1, main='남녀 인구수', xlab='성별', ylab='인구')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)'
pch=1, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)'
pch=1, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=1, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=2, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=0, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=1, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=3, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=4, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=5, col='red')
plot(cars$speed, cars$dist,
main='속도와 제동거리',
xlab='속도(mph)', ylab='제동거리(ft)',
pch=1, col='red')
# 선 그래프
tail(Nile)
plot(Nile, main='나일강의 연도별 유량 변화'
xlab='연도', ylab='유량')
plot(Nile, main='나일강의 연도별 유량 변화'
xlab='연도', ylab='유량')
plot(Nile, main='나일강의 연도별 유량 변화',
xlab='연도', ylab='유량')
plot(Nile, main='나일강의 연도별 유량 변화', type='p',
xlab='연도', ylab='유량')
tableV5 = table(pop$V5)
tabelV5
tableV5
barplot(tableV5, main='출생아별 빈도', xlab='출생아수', ylab='빈도')
hist(pop$v2, main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, beaks=c(seq(0,90,10)), right=F
main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, beaks=c(seq(0,90,10)), right=F
main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, beaks=c(seq(0,90,10)), right=F,
main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, breaks=c(seq(0,90,10)), right=F,
main='연령별 분포', xlab='연령', ylab='빈도')
hist(pop$V2, breaks=c(seq(0,90,10)), right=F, probability=T,
main='연령별 분포', xlab='연령', ylab='빈도')
tableV4
tableV4 = table(pop$V4)
tableV4
pie(tavelV4, main='학력별 비중')
pie(tavelV4, main='학력별 비중')
pie(tableV4, main='학력별 비중')
pie(tableV4, main='학력별 비중', cex=0.0)
pie(tableV4, main='학력별 비중', cex=0.8)
install.packages('ggplot2')
library('ggplot2')
head(df)
head(df)
geom_line()
# 선 그래프
tail(Nile)
plot(Nile, main='나일강의 연도별 유량 변화', # type='p': 산점도
xlab='연도', ylab='유량')
library('ggplot2')
df = as.data.frame(Nile)
head(df)
df$year = 1871:1970
ggplot(df, aes(x=year, y=x))
geom_line()
ggplot(df, aes(x=year, y=x)) +
geom_line()
pop = read.csv('data/2010년 인구사항.csv', header=F, na.strings='.')
str(pop)
pop$V1 = factor(pop$V1, levels=c(1,2), labels=c('남자','여자'))
pop$V3 = factor(pop$V3, levels=c(1:14),
labels=c("가구주", "가구주의 배우자", "자녀", "자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자", "증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자", "형제자매의 자녀, 그 배우자", "부모의 형제자매, 그 배우자",
"기타 친인척",  "그외같이사는사람"))
tail(pop)
pop$V4 = factor(pop$V4, levels=1:8,
labels=c("안 받았음", "초등학교", "중학교", "고등학교", "대학-4년제 미만",
"대학-4년제 이상", "석사과정", "박사과정"))
tail(pop)
ggplot(df, aes(x=year, y=x)) +
geom_line() +
ggtitle('나일강의 연도별 유량 변화')+
xlab('연도') + ylab('유량')
cafe = read.csv('data.cafedata.csv')
cafe = read.csv('data.cafedata.csv')
head(cafe)
cafe = read.csv('data.cafedata.csv')
cafe = read.csv('data/cafedata.csv')
head(cafe)
str(cafe)
head(cafe)
dim(cafe)
summary(cafe)
cafe#Coffees = as.numeric(cafe$Coffees)
cafe$Coffees = as.numeric(cafe$Coffees)
sort(cafe$Coffees)
sort(cafe$Coffees)[1]
sort(cafe$Coffees)[legth(cafe$coffees)]
sort(cafe$Coffees)[length(cafe$coffees)]
sort(cafe$Coffees)[length(cafe$coffees)-1]
sort(cafe$Coffees)[length(cafe$Coffees)-1]
sort(cafe$Coffees), decreasing=TRUE)[1]  # 최대값
sort(cafe$Coffees, decreasing=T)[1]  # 최대값
sum(is.na(cafe$Coffees))
sort(cafe$Coffees)[length((cafe$Coffees)-sum(is.na(cafe$Coffees)))]  # 최대값
sort(cafe$Coffees)[length(cafe$Coffees)-sum(is.na(cafe$Coffees))]  # 최대값
min(cafe$Coffees, na.rm=T)
max(cafe$Coffees, na.rm=T)
# 최빈값을 알기 위한 방법
stem(cafe$Coffees)
table(cafe$Coffees)
sum(cafe$Coffees * weightm na.rm=T)
# 평균
num.na = sum(is.na(cafe$Coffees))       # NA 의 갯수
weight = 1 / (length(cafe$Coffees) - num.na)
sum(cafe$Coffees * weightm na.rm=T)
# 평균
num.na = sum(is.na(cafe$Coffees))       # NA 의 갯수
weight = 1 / (length(cafe$Coffees) - num.na)
sum(cafe$Coffees * weight, na.rm=T)
# 양 끝 값의 변화에 따른 평균의 변화
rc = cafe$Coffees
rc = ma.omit(rc)
length(rc)
rc = na.omit(rc)
# 양 끝 값의 변화에 따른 평균의 변화
rc = cafe$Coffees
rc = na.omit(rc)
length(rc)
# 양 끝 값의 변화에 따른 평균의 변화
rc = na.omit(cafe$Coffees)
length(rc)
mean(rc)
rc[rc==max(rc)] = 480
mean(rc)
median.idx
# 중앙값
median.idx = (1 + length(rc) / 2)
median.idx
sort(rc)[median.idx]
median(cafe$Coffees, na.rm=T)
# 중앙값
median.idx = (1 + length(rc)) / 2
median.idx
pop = read.csv('data/2010년 인구사항.csv', header=F, na.strings='.')
str(pop)
pop$V1 = factor(pop$V1, levels=c(1,2), labels=c('남자','여자'))
pop$V3 = factor(pop$V3, levels=c(1:14),
labels=c("가구주", "가구주의 배우자", "자녀", "자녀의 배우자", "가구주의 부모",
"배우자의 부모", "손자녀, 그 배우자", "증손자녀, 그 배우자", "조부모",
"형제자매, 그 배우자", "형제자매의 자녀, 그 배우자", "부모의 형제자매, 그 배우자",
"기타 친인척",  "그외같이사는사람"))
pop$V4 = factor(pop$V4, levels=1:8,
labels=c("안 받았음", "초등학교", "중학교", "고등학교", "대학-4년제 미만",
"대학-4년제 이상", "석사과정", "박사과정"))
tail(pop)
# binary file로 저장
save.image('data/pop.rda')
# binary file로 저장
save.image('data/pop.rda')
height = seq(164, 176, 2)
height.m = mean(height)
h.dev = height - height.m
sum(h.dev)
sum(h.dev ^ 2)
sum(h.dev ^ 2) / 7
mean(h.dev ^ 2)
sqrt(mean(h.dev ^ 2))
# R에서 제공하는 함수
var(height)
sd(height)
### 사분위수
quantile(rc)
### 사분위수
quantile(cafe$Coffees)
### 사분위수
quantile(cafe$Coffees)
### 사분위수
quantile(cafe$Coffees, na.rm=T)
qs = quantile(cafe$Coffees, na.rm=T)
bp = boxplot(cafe$Coffees)
bp = boxplot(cafe$Coffees, main='"커피 판매량에 대한 상자도표', axes=F)
# 숫자 데이터를 범주형으로 인식하지 못하게 하여야 함
cafe = read.csv('data/cafedata.csv', stringsAsFactors=F)
str(cafe)
head(cafe)
dim(cafe)       # 48 22
summary(cafe)   # pandas describe()와 유사
# 커피 판매량의 최대값과 최소값
cafe$Coffees = as.numeric(cafe$Coffees)
sort(cafe$Coffees)
sort(cafe$Coffees)[1]       # 최소값
sort(cafe$Coffees, decreasing=T)[1]  # 최대값
sort(cafe$Coffees)[length(cafe$Coffees)-sum(is.na(cafe$Coffees))]  # 최대값
min(cafe$Coffees, na.rm=T)
max(cafe$Coffees, na.rm=T)
# 최빈값을 알기 위한 방법
stem(cafe$Coffees)      # 줄기-잎 그립
table(cafe$Coffees)
# 평균
num.na = sum(is.na(cafe$Coffees))       # NA 의 갯수
weight = 1 / (length(cafe$Coffees) - num.na)
sum(cafe$Coffees * weight, na.rm=T)     # 산술평균
mean(cafe$Coffees, na.rm=T)
# 양 끝 값의 변화에 따른 평균의 변화
rc = na.omit(cafe$Coffees)
length(rc)
rc[rc==max(rc)] = 480
mean(rc)        # 21.5 -> 30.7
# 중앙값
median.idx = (1 + length(rc)) / 2
median.idx
sort(rc)[median.idx]             # 23
median(cafe$Coffees, na.rm=T)    # 23
### 표준편차
# 아래와 같이 계산하면 퍼진 정도를 알 수 있다.
height = seq(164, 176, 2)
height.m = mean(height)
h.dev = height - height.m
sum(h.dev)
sum(h.dev ^ 2) / 7
mean(h.dev ^ 2)         # 분산 - 16
sqrt(mean(h.dev ^ 2))   # 표준 편차 - 4
# R에서 제공하는 함수
var(height)             # 표본 분산 - 18.67
sd(height)              # 표본 표준 편차 - 4.32
### 사분위수
quantile(cafe$Coffees, na.rm=T)
qs = quantile(cafe$Coffees, na.rm=T)
bp = boxplot(cafe$Coffees, main='"커피 판매량에 대한 상자도표', axes=F)
IQR(cafe$Coffees, na.rm=T)
### 이상치(Outlier)
boxplot(car$dist)
### 이상치(Outlier)
boxplot(cars$dist)
hist(cars$dist, breaks=seq(0, 120, 10))
qs = quantile(cars$dist)
qs
iqr = qs[4] - qs[2]
upperlimit = qs[4] + 1.5 * iqr
lowerlimit = qs[2] - 1.5 * iqr
cars$dist[cars$dist > upperlimit | cars$dist < lowerlimit ]
upperlimit, lowerlimit
upperlimit = qs[4] + 1.5 * iqr
lowerlimit = qs[2] - 1.5 * iqr
upperlimit, lowerlimit
qs = quantile(cars$dist)
qs
iqr = qs[4] - qs[2]
upperlimit = qs[4] + 1.5 * iqr
lowerlimit = qs[2] - 1.5 * iqr
upperlimit, lowerlimit
cars$dist[cars$dist > upperlimit | cars$dist < lowerlimit]
head(iris)
head(iris)
setosa = iris[iris$Species == 'setosa',]
qs = quantile(setosa$Sepal.Width)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qa[2] - 1.5 * iqr
ll = qs[2] - 1.5 * iqr
setosa$Sepal.Width[setosa$Sepal.Width > ul | setosa$Sepal.Width < ll]
for (feature_name in columns(iris)[1:4]) {
features = (setosa[, feature_name])
qa = quamtile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
}
for (feature_name in colnames(iris)[1:4]) {
features = (setosa[, feature_name])
qa = quamtile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
}
qa = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
for (feature_name in colnames(iris)[1:4]) {
features = (setosa[, feature_name])
qa = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
}
print(paste(species, '품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
for (species in c('setosa', 'versicoler', 'virginica')) {
for (feature_name in colnames(iris)[1:4]) {
features = iris[iris$Species == spevies, feature_name])
for (species in c('setosa', 'versicoler', 'virginica')) {
for (feature_name in colnames(iris)[1:4]) {
features = iris[iris$Species == spevies, feature_name])
features = iris[iris$Species == species, feature_name])
for (species in c('setosa', 'versicoler', 'virginica')) {
for (feature_name in colnames(iris)[1:4]) {
features = iris[iris$Species == species, feature_name])
ll = qs[2] - 1.5 * iqr
for (species in c('setosa', 'versicoler', 'virginica')) {
features = iris[iris$Species == species, feature_name]
qa = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste(species, '품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
for (feature_name in colnames(iris)[1:4]) {
features = iris[iris$Species == species, feature_name]
qa = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste(species, '품종의', feature_name, '피처의 이상치는', length(outliers), '개입니다.'))
}
# Iris 데이터의 이상치 데이터 확인하기
head(iris)
setosa = iris[iris$Species == 'setosa', ]
qs = quantile(setosa$Sepal.Width)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
setosa$Sepal.Width[setosa$Sepal.Width > ul | setosa$Sepal.Width < ll]
for (feature_name in colnames(iris)[1:4]) {
features = setosa[, feature_name]
qs = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피쳐의 이상치는', length(outliers), '개입니다.'))
}
for (feature_name in colnames(iris)[1:4]) {
features = setosa[, feature_name]
qs = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste('Setosa 품종의', feature_name, '피쳐의 이상치는', length(outliers), '개입니다.'))
}
for (species in c('setosa','versicoler','virginica')) {
for (feature_name in colnames(iris)[1:4]) {
features = iris[iris$Species == species, feature_name]
qs = quantile(features)
iqr = qs[4] - qs[2]
ul = qs[4] + 1.5 * iqr
ll = qs[2] - 1.5 * iqr
outliers = features[features > ul | features < ll]
print(paste(species, '품종의', feature_name, '피쳐의 이상치는', length(outliers), '개입니다.'))
}
}
boxplot(iris[iris$Species == 'setosa', 'Sepal.Width'])
boxplot(iris[iris$Species == 'setosa', 'Petal.Length'])
boxplot(iris[iris$Species == 'setosa', 'Petal.Width'])
boxplot(iris[iris$Species == 'virginica', 'Sepal.Length'])
boxplot(iris[iris$Species == 'virginica', 'Sepal.Width'])
# 숫자 데이터를 범주형으로 인식하지 못하게 하여야 함
cafe = read.csv('data/cafedata.csv', stringsAsFactors=F)
str(cafe)
head(cafe)
dim(cafe)       # 48 22
summary(cafe)   # pandas describe()와 유사
# 커피 판매량의 최대값과 최소값
cafe$Coffees = as.numeric(cafe$Coffees)
sort(cafe$Coffees)
sort(cafe$Coffees)[1]                   # 최소값
sort(cafe$Coffees, decreasing=T)[1]     # 최대값
sort(cafe$Coffees)[length(cafe$Coffees)-sum(is.na(cafe$Coffees))]
min(cafe$Coffees, na.rm=T)
min(cafe$Coffees, na.rm=T)
max(cafe$Coffees, na.rm=T)
# 확률변수의 평균과 기댓값
# 동전을 2회 던졌을때 앞면의 갯수
x = c(0, 1, 2)
px = c(1/4, 1/2, 1/4)
# 확률변수의 평균과 기댓값
# 동전을 2회 던졌을때 앞면의 갯수
x = c(0, 1, 2)
px = c(1/4, 1/2, 1/4)
ex = sum(x * px)
ex
ex
ex = sum(x * px)
ex
# 확률변수의 평균과 기댓값
# 동전을 2회 던졌을때 앞면의 갯수
x = c(0, 1, 2)
px = c(1/4, 1/2, 1/4)
ex = sum(x * px)
ex
x2 = x ^ 2
x2
ex2 = sum(x2 * px)
ex2
varx
varx = ex2 - ex ^ 2
varx
### 동전을 4회 던졌을 때 앞면의 갯수
x = c(0, 1, 2, 3, 4)
px = c(1/16, 1/4, 3/8, 1/4, 1/16)
ex = sum(x * px)
ex
x2 = x^2
x2
ex2 = sum(x2 * px)
ex2
varx = ex2 - ex^2
varx
