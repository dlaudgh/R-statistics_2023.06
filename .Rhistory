f32.mean = rep(NA, n)
for (i in 1:n) {
f2.mean[i] = mean(rf(2, df1=df, df2=df2))
f4.mean[i] = mean(rf(4, df1=df, df2=df2))
f16.mean[i] = mean(rf(16, df1=df, df2=df2))
f32.mean[i] = mean(rf(32, df1=df, df2=df2))
}
# F 분포(자유도1=5, 자유도2=10)의 평균과 표준편차
m = df2 / (df2 - 2)
s = sqrt((2*df2^2*(df+df2-2)) / (df*(df2-2)^2*(df2-4)))
par(mfrow=c(2,2), oma=c(0,0,2,0), family='malgun')
hist(f2.mean, prob=T, main='표본크기: 2', ylab='', xlab='',
col='orange', border='red')
x1 = seq(min(f2.mean), max(f2.mean), length=1000)
y1 = dnorm(x1, m, s/sqrt(2))
lines(x1, y1, lty=2, lwd=2, col='blue')
hist(f4.mean, prob=T, main='표본크기: 4', ylab='', xlab='',
col='orange', border='red')
x2 = seq(min(f4.mean), max(f4.mean), length=1000)
y2 = dnorm(x2, m, s/sqrt(4))
lines(x2, y2, lty=2, lwd=2, col='blue')
hist(f16.mean, prob=T, main='표본크기: 16', ylab='', xlab='',
col='orange', border='red')
x3 = seq(min(f16.mean), max(f16.mean), length=1000)
y3 = dnorm(x3, m, s/sqrt(16))
lines(x3, y3, lty=2, lwd=2, col='blue')
hist(f32.mean, prob=T, main='표본크기: 32', ylab='', xlab='',
col='orange', border='red')
x4 = seq(min(f32.mean), max(f32.mean), length=1000)
y4 = dnorm(x4, m, s/sqrt(32))
lines(x4, y4, lty=2, lwd=2, col='blue')
mtext('F 표본평균의 분포(자유도=5)', outer=T, cex=1.2)
par(mfrow=c(1,1))
### 단일 모집단의 평균 검정(1-sample T test)
df = read.table('data/babyboom.dat.txt', header=F)
names(df) = c('time','gender','weight','minutes')
head(df)
girl_baby = subset(df, gender==1)    # df[df$gender==1,]
weight = girl_baby[[3]]
weigh
weight
barx = mean(weight)
s = sd(weight)
n = length(weight)
mu0 = 2800
t = (barx - mu0) / (s / sqrt(n))
t
# 임계값과 유의확률
alpha = 0.05
uppper.limit = qt(1 - alpha, df=n-1)
upper.limit = qt(1 - alpha, df=n-1)
upper.limit
# 판정
if (t > upper.limit) {
print('귀무가설 기각')
print('여자 신생아의 체중이 2800보다 크다.')
} else {
print('귀무가설 채택')
print('여자 신생아의 체중이 2800보다 크지 않다.')
}
p.value = 1 - pt(t, df=n-1)
p.value
# 판정
if (p.value < alpha) {
print('귀무가설 기각')
print('여자 신생아의 체중이 2800보다 크다.')
} else {
print('귀무가설 채택')
print('여자 신생아의 체중이 2800보다 크지 않다.')
}
# R
t.test(weight, mu=2800, alternative='greater')
####################################################################
# 정규성 검정 - 표본이 정규성을 가져야 1-sample T test를 할 수 있음.
####################################################################
shapiro.test(weights)
####################################################################
# 정규성 검정 - 표본이 정규성을 가져야 1-sample T test를 할 수 있음.
####################################################################
shapiro.test(weight)
qqnorm(weight)
qqline(weight)
shapiro.test(x)
x = c(25, 16, 44, 82, 36, 58, 18)
shapiro.test(x)
qqnorm(x)
qqline(x)
qqline(x, col='red')
x = c(25, 16, 44, 82, 36, 58, 63, 18)
shapiro.test(x)     # p-value: 0.5
qqnorm(x)
qqline(x, col='red')
### 단일 모비율의 검정
bb = read.table('data/restitution.txt', header=F)
head(bb)
### 단일 모비율의 검정
bb = read.table('data/restitution.txt')
head(bb)
### 단일 모비율의 검정
bb = read.table('data/restitution.txt', header=T
### 단일 모비율의 검정
bb = read.table('data/restitution.txt', header=T)
head(bb)
bb = read.table('data/restitution.txt', header=T)
head(bb)
rel = ifelse(bb$rst < 0.4134 | bb$rst > 0.4374, 1, 0)
# 검정 통계량 계산
n = length(rel)
nos = sum(rel)
nos
z = (phat - p0) / sqrt(p0 * (1-p0) / n)
phat = nos / n
p0 = 0.1
z = (phat - p0) / sqrt(p0 * (1-p0) / n)
# 임계값과 유의확률
alpha = 0.05
uppper.limit = qnorm(1 - alpha)
p.value = 1 - pnorm(z)
c(uppper.limit, p.value)
# R: prop.test
prop.test(nos, n, p=0.1, alternative='greater', correct=F)
par(mar=c(0,1,1,1))
x <- seq(-3, 3, by=0.001)
y <- dnorm(x)
plot(x, y, type="l", axes=F, ylim=c(-0.02, 0.4),
main="", xlab="z", ylab="")
abline(h=0)
polygon(c(upper.limit, x[x>upper.limit], 3), c(0, y[x>upper.limit], 0), col=2)
text(upper.limit, -0.02, expression(z[0.05]==1.645))
polygon(c(z, x[x>z], 3), c(0, y[x>z], 0), density=20, angle=45)
text(z, -0.02, paste("z=", round(z, 3)))
text(1.2, 0.3, paste("P(Z>z)=", round(p.value, 3)), cex=0.8)
### 독립 표본: 2 sample T test
data = read.table('data/chapter7.txt', header=T)
head(data)
data = read.table('data/chapter7.txt', header=T)
head(data)
##### 모집단이 2개인 경우의 평균 비교 검정
### 독립 표본: 2 sample T test
data = read.table('data/chapter7.txt', header=T)
head(data)
girl = subset(data, gender==1)
boy = subset(data, gender==2)
# 등분산성 테스트
var.test(data$weight ~ data$gender)
# 2-sample T test
t.test(data$weight ~ data$gender, mu=0, alternative='less', var.equal=T)
c(mean(girl$weight), mean(boy$weight))
# 정규성 테스트
shapiro.test(girl$weight)
shapiro.test(boy$weight)   # p-value = 0.02
qqnorm(boy$weight)
qqline(boy$weight)
### 대응 표본: paired T test
# 식욕부진 치료요법의 효과 검증
data = read.csv('data/anorexia.csv')
head(data)
t.test(data$Prior, data$Post, paired=T, alternative='less')
### 일원 분산분석(ANOVA: Analysis of Variance)
ad = read.csv('data/age.data.csv')
head(ad)
tail(ad)
ad$scale = factor(ad$scale)
g2 = ad[ad$scale == 2,]
g1 = ad[ad$scale == 1,]
g2 = ad[ad$scale == 2,]
g3 = ad[ad$scale == 3,]
boxplot(g1$age, g2$age, g3$age)
boxplot(age ~ scale, data=ad, col=rainbow(3))
# 등분산 검증
install.packages('lawstat')
library(lawstat)
levene.test(ad$age, ad$scale)
# Anova
ow = lm(age~scale, data=ad)
anova(ow)
# 평균이 같다라는 귀무가설 채택 -> 평균이 같다
# anova 결과 F-value=0.366
1 - pf(0.366, 2, 147)
### 적합도 검정
# 멘델의 유전 법칙
x = c(315, 108, 101, 32)
chisq.test(x, p=c(9,3,3,1)/16)
### 동질성 검정
# 연령대별 SNS 이용률
sns = read.csv('data/snsbyage.csv', stringsAsFactors=F)
head(sns)
### 동질성 검정
# 연령대별 SNS 이용률
sns = read.csv('data/snsbyage.csv', stringsAsFactors=F)
head(sns)
### 동질성 검정
# 연령대별 SNS 이용률
sns = read.csv('data/snsbyage.csv', stringsAsFactors=F)
head(sns)
tail(sns)
sns$age = factor(sns$age, levels=c(1,2,3), labels=c('20대','30대','40대'))
sns$service = factor(sns$service, levels=c('F','T','K','C','E'), ordered=T)
sns.tab = table(sns$age, sns$service)
sns.tab
ct.info = chisq.test(sns.tab)
ct.info
names(ct.info)
ct.info$p.value
# 분석
ct.info$expected
ct.info$observed
for (i in 1:3) {
for (k in 1:5) {
chi.sum = chi.sum +
(ct.info$observed[i,k]-ct.info$expected[i,k])^2/ct.info$observed[i,k]
}
}
chi.sum = 0
for (k in 1:5) {
chi.sum = chi.sum +
(ct.info$observed[i,k]-ct.info$expected[i,k])^2/ct.info$observed[i,k]
}
chi.sum
for (k in 1:5) {
chi.sum = chi.sum +
(ct.info$observed[i,k]-ct.info$expected[i,k])^2/ct.info$expected[i,k]
}
for (i in 1:3) {
for (k in 1:5) {
chi.sum = chi.sum +
(ct.info$observed[i,k]-ct.info$expected[i,k])^2/ct.info$expected[i,k]
}
}
chi.sum
chi.sum = 0
for (i in 1:3) {
for (k in 1:5) {
chi.sum = chi.sum +
(ct.info$observed[i,k]-ct.info$expected[i,k])^2/ct.info$expected[i,k]
}
}
chi.sum
1 - pchisq(chi.sum, df=8)
# table 관련
margin.table(sns.tab, margin=1)
margin.table(sns.tab, margin=2)
margin.table(sns.tab)
addmargins(sns.tab)
### 독립성 검정
data("UCBAdmissions")
UCBAdmissions
length(UCBAdmissions)
ucba.tab = apply(UCBAdmissions, c(1,2), sum)
ucba.tab
chisq.test(ucba.tab)
varx
varx
x = c(0, 1, 2)
px = c(1/4, 1/2, 1/4)
ex = sum(x * px)
ex                      # 기댓갑, 1
x2 = x ^ 2
x2
ex2 = sum(x2 * px)
ex2
varx = ex2 - ex ^ 2     # E(x^2) - E(X)^2
varx                    # 분산, 1/2
### 동전을 4회 던졌을 때 앞면의 갯수
x = c(0, 1, 2, 3, 4)
px = c(1/16, 1/4, 3/8, 1/4, 1/16)
ex = sum(x * px)    # 기댓값, 2
ex
x2 = x^2
x2
ex2 = sum(x2 * px)
ex2
varx = ex2 - ex^2
varx                # 분산, 1
### 주사위를 2회 던졌을 때 3의 배수의 갯수
x = c(0, 1, 2)
px = c(4/9, 4/9, 1/9)
ex = sum(x * px)        # 기댓값, 2/3
ex
x2 = x^2
x2
ex2 = sum(x2 * px)
ex2
varx = ex2 - ex^2       # 분산, 4/9
varx
n = 6
p = 1/3
x = 0:n     # B(6, 1/3)
# 확률 질량함수 nCx p^x (1-p)^(6-x)
dbinom(2, n, p)     # 6C2 (1/3)^2 (1-1/3)^(6-2)
dbinom(x=4, size=n, prob=p)
px = dbinom(x, n, p)
px
plot(x,px,type='s',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)')
plot(x,px,type='h',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)',
lwd=20,col='red')
n = 10
p = 4/5
dbinom(7, n, p)
# 3. A라는 회사는 스마트폰의 한 부품을 만드는 회사로, 이 A사의 불량률은 5%로 알려져 있다.
#    이 회사의 제품 20개를 조사했을 때, 불량이 2개 이하로 나올 확률을 구하시오.
n = 20
p = 0.05
qbinom(p=0.1, n, p)
# 3. A라는 회사는 스마트폰의 한 부품을 만드는 회사로, 이 A사의 불량률은 5%로 알려져 있다.
#    이 회사의 제품 20개를 조사했을 때, 불량이 2개 이하로 나올 확률을 구하시오.
n = 20
p = 0.05
x = 0:n
qbinom(p=0.1, n, p)
qbinom(p=0.1, n, p)
qbinom(p=0.5, n, p)
n = 6
p = 1/3
x = 0:n     # B(6, 1/3)
# 확률 질량함수 nCx p^x (1-p)^(6-x)
dbinom(2, n, p)     # 6C2 (1/3)^2 (1-1/3)^(6-2)
dbinom(x=4, size=n, prob=p)
px = dbinom(x, n, p)
px
plot(x,px,type='s',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)')
n = 6
p = 1/3
x = 0:n     # B(6, 1/3)
# 확률 질량함수 nCx p^x (1-p)^(6-x)
dbinom(2, n, p)     # 6C2 (1/3)^2 (1-1/3)^(6-2)
dbinom(x=4, size=n, prob=p)
px = dbinom(x, n, p)
px
plot(x,px,type='s',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)')
n = 6
p = 1/3
x = 0:n     # B(6, 1/3)
# 확률 질량함수 nCx p^x (1-p)^(6-x)
dbinom(2, n, p)     # 6C2 (1/3)^2 (1-1/3)^(6-2)
dbinom(x=4, size=n, prob=p)
px = dbinom(x, n, p)
px
plot(x,px,type='s',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)')
n = 6
p = 1/3
x = 0:n
dbinom(2, n, p)     # 6C2 (1/3)^2 (1-1/3)^(6-2)
dbinom(x=4, size=n, prob=p)
px = dbinom(x, n, p)
px
plot(x,px,type='s',xlab='성공 횟수',ylab='확률(P[X=x])',main='B(6,1/3)')
pbinom(2, n, p)
dbinom(1,n,p) + dbinom(2,n,p) + dbinom(3,n,p)
pbinom(3,n,p) - pbinom(0,n,p)
qbinom(p=0.1, n, p)
qbinom(p=0.5, n, p)
options(digits=4)
mu = 170
sigma = 6
ll = mu - 3 * sigma     # lower limit
ul = mu + 3 * sigma     # upper limit
x = seq(ll, ul, by=0.01)
px = dnorm(x, mean=mu, sd=sigma)
plot(x, px, type='l', xlab='남학생의 키', ylab='P[X=x]',
lwd=2, col='red', main='N(170, 6^2)')
prob = round(pnorm(180, 170, 6), 4)       # 0.9522
print(paste('180cm 보다 큰 학생의 확률은', 1-prob))
smp = c(1196, 1340, 1232, 1184, 1295, 1247, 1201, 1182,
1192, 1287, 1159, 1160, 1243, 1264, 1276)
smp2 = c(1396, 1340, 1232, 1184, 1295, 1247, 1201, 1182,
1392, 1287, 1359, 1360, 1243, 1264, 1276)
xbar = mean(smp)
s = sd(smp)
c(xbar, s)
n = length(smp)
mu.zero = 1220
data = read.table('data/chapter7.txt', header=T)
head(data)
girl = subset(data, gender==1)
boy = subset(data, gender==2)
c(mean(girl$weight), mean(boy$weight))
# 정규성 테스트
shapiro.test(girl$weight)   # p-value = 0.02
shapiro.test(boy$weight)    # p-value = 0.2
qqnorm(boy$weight)
qqline(boy$weight)
# 2-sample T test
t.test(data$weight ~ data$gender, mu=0, alternative='less', var.equal=T)
##### 상관관계
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$gender = factor(hf$Gender, levels=('M','F'))
hf$gender = factor(hf$Gender, levels=('M','F'))
##### 상관관계
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$gender = factor(hf$Gender, levels=('M','F'))
hf$Gender = factor(hf$Gender, levels=('M','F'))
# filtering
hf.son = hf[hf$Gender == 'M',]      # hf.son = subset(hf, Gender=='M)
# selection
hf.son = hf.son(c('Father','Height'))
hf.son = hf.son * 2.54
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$Gender = factor(hf$Gender, levels=('M','F'))
# selection
hf.son = hf.son(c('Father','Height'))
hf.son = hf.son * 2.54
hf
f.mean = mean(hf.son$Father)
s.mean = mean(hf.son$Height)
cov.num = sum((hf.son$Father - f.mean) * (hf.son$Height - s.mean))
cov.fs = cov.num / (length(hf.son$Father) - 1)
cov.fs
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$Gender = factor(hf$Gender, levels=('M','F'))
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$Gender = factor(hf$Gender, levels=('M','F'))
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
tail(hf)
hf$Gender = factor(hf$Gender, levels=('M','F'))
# R의 cov() 함수 이용
cov(hf.son$Father, hf.son$Height)
### 상관계수
f.var = var(hf.son$Father)
s.sd = sd(hf.son$Height)
c(f.sd, s.sd)
### 상관계수
f.sd = sd(hf.son$Father)
s.sd = sd(hf.son$Height)
c(f.sd, s.sd)
cor.fs = cov.fs / (f.sd * s.sd)
cor.fs
# R의 cor() 함수 이용
cor(hf.son$Father, hf.son$Height)
##### 상관관계
hf = read.table('data/Galton.txt', header=T, stringsAsFactors=F)
data('mpg', package='ggplot2')
mpg
table(mpg$class)
t.test(compact$hwy, midsize$hwy)
compact = mpg[mpg$class == 'compact',]
midsize = mpg[mpg$class == 'midsize',]
t.test(compact$hwy, midsize$hwy)
# 2
t.test(compact$cty, midsize$cty)
table(mpg$fl)
# 3
r = mpg[mpg$fl == 'r',]
p = mpg[mpg$fl == 'p',]
table(compact$drv)
table(compact$drv)
# 4
shapiro.test(compact$cty[compact$drv == '4'])
shapiro.test(compact$cty[compact$drv == 'f'])   #
t.test(r$hwy, p$hwy)
t.test(compact$hwy[compact$drv == 'f'], compact$hwy[compact$drv == '4'])
# 5
compact = mpg[mpg$class == 'compact',]
subcompact = mpg[mpg$class == 'subcompact',]
midsize = mpg[mpg$class == 'midsize',]
t.test(compact$hwy, subcompact$hwy, midsize$hwy)
# 5
mpg$class = factor(mpg$class)
compact = mpg[mpg$class == 'compact',]
subcompact = mpg[mpg$class == 'subcompact',]
midsize = mpg[mpg$class == 'midsize',]
ow = lm(hwy~class, data=mpg)
anova(ow)
# 5
mpg$class = factor(mpg$class)
# compact = mpg[mpg$class == 'compact',]
# subcompact = mpg[mpg$class == 'subcompact',]
# midsize = mpg[mpg$class == 'midsize',]
ow = lm(hwy~class, data=mpg)
anova(ow)
# 1. 어느 대학교에서 대중교통을 이용하여 등교하는 학생의 비율을 알아보기 위하여
#    이 학교 학생 중 100 명을 임의 추출하여 조사한 결과 80%의 학생이 대중교통을
#    이용하여 등교하는 것으로 나타났다. 이 결과를 이용하여 이 대학교 전체 학생 중에서
#    대중교통을 이용하여 등교하는 학생의 비율 p에 대한 신뢰도 95%의 신뢰 구간을
#    구하시오.(20)
phat = 0.8
n = 100
ll = phat - 1.96 * sqrt(phat * (1-phat) / n)
ul = phat + 1.96 * sqrt(phat * (1-phat) / n)
c(ll, ul)
# 2. 어느 전구회사에서 생산하는 전구의 수명은 평균이 800일이고 표준편차가 30일인
#    정규분포를 따른다고 한다. 그럼 전구의 수명이 830일 이상 860일 이하일 확률을
#    구하시오.(10)
pnorm(860, 800, 30) - pnorm(830, 800, 30)
# 3. mtcars 데이터셋에서 배기량(disp)에 따른 마력(hp)의 회귀식을 구하시오.(20)
head(mtcars)
q = lm(hp ~ disp, data=mtcars)
q$coefficients
# 3
r = mpg[mpg$fl == 'r',]
p = mpg[mpg$fl == 'p',]
t.test(r$hwy, p$hwy)
data('mpg', package='ggplot2')
mpg
# 3
r = mpg[mpg$fl == 'r',]
p = mpg[mpg$fl == 'p',]
t.test(r$hwy, p$hwy)
t.test(r$cty, p$cty)
t.test(r$hwy, p$hwy)
# 3. mtcars 데이터셋에서 배기량(disp)에 따른 마력(hp)의 회귀식을 구하시오.(20)
head(mtcars)
q = lm(hp ~ disp, data=mtcars)
q$coefficients
View(mpg)
mpg = mpg[mpg$class == 'compact',] | mpg[mpg$class == 'subcompact',]
mpg = mpg[mpg$class == ('compact'|'subcompact'|'midsize'),]
